<?php
/**
 * Implementation of hook_perm().
 */
function mc_import_perm() {
  return array('administer mc import');
}

/**
 * Implementation of hook_menu().
 */
function mc_import_menu() {
  $items['admin/content/mc_import'] = array(
    'title' => 'Manuscript Import',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mc_import_manual_form'),
    'access arguments' => array('administer mc import'),
  );
  $items['admin/settings/mc_import'] = array(
    'title' => 'Manuscript Import',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mc_import_admin_form'),
    'access arguments' => array('administer mc import'),
  );
  $items['admin/settings/mc_import/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $items['admin/settings/mc_import/node_map'] = array(
    'title' => 'Field Mapping',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mc_import_admin_node_map'),
    'access arguments' => array('administer mc import'),
    'type' => MENU_LOCAL_TASK,
  );
  foreach (mc_import_get_ops() as $op) {
    $items['admin/settings/mc_import/node_map/' . $op] = array(
      'title' => '!op settings',
      'title arguments' => array('!op' => $op),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('mc_import_node_map_form', $op),
      'access arguments' => array('administer mc import'),
    );
  }

  return $items;
}

function mc_import_get_ops() {
  $ops = variable_get('mc_import_admin_subject_ops','');
  if ($ops != '') {
    $ops = explode(',', $ops);
    foreach ($ops as &$op) {
      trim($op);
    }
    return $ops;
  }
  return array();
}

/**
 * mc_import_admin_form defines the administrative form for 
 * this module.
 */
function mc_import_admin_form(&$form_state) {
  $form['mc_import'] = array(
    '#type' => 'fieldset',
    '#title' => t('Manuscript Central'),
    '#description' => t('Main settings for mc import'),
  );
  $form['mc_import']['mc_import_host'] = array(
    '#type' => 'textfield',
    '#title' => t('Email Host'),
    '#description' => t('Where is the server where the email address is.'),
    '#default_value' => variable_get('mc_import_host', ''),
    '#required' => TRUE,
  );
  $form['mc_import']['mc_import_port'] = array(
    '#type' => 'textfield',
    '#title' => t('Email Port'),
    '#description' => t('Port to which to connect to the e-mail server. Common ports include:
        110, 143, 443'),
    '#default_value' => variable_get('mc_import_port', ''),
    '#required' => TRUE,
  );
  $form['mc_import']['mc_import_prot'] = array(
    '#type' => 'radios',
    '#title' => t('Email Protocal'),
    '#default_value' => variable_get('mc_import_prot'),
    '#options' => array('pop3' => t('Pop3'), 'imap' => t('Imap')),
    '#required' => TRUE,
  );
  $form['mc_import']['mc_import_options'] = array(
    '#type' => 'textfield',
    '#title' => t('Additional Server Options'),
    '#description' => t('See imap_open() details for more information. Input everyything
      inline. e.g., /notls/no-validate-cert...'),
    '#default_value' => variable_get('mc_import_options', ''),
  );
  $form['mc_import']['mc_import_email'] = array(
    '#type' => 'textfield',
    '#title' => t('MC Import Email'),
    '#size' => 60,
    '#element_validate' => 'mc_import_valid_email',
    '#default_value' => variable_get('mc_import_email', ''),
    '#required' => TRUE,
  );
  $form['mc_import']['mc_import_password'] = array(
    '#type' => 'password',
    '#title' => t('Password for e-mail account'),
    '#size' => 15,
    '#max_length' => 64,
    '#default_value' => variable_get('mc_import_password', ''),
  );
  $form['mc_import']['mc_import_cron'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Automatic Imports'),
    '#description' => t('By Checking this box, when cron runs emails
      will import automatically'),
    '#default_value' => variable_get('mc_import_cron', '') ? variable_get('mc_import_cron', '') : 1,
  );
  $form['#validate'][] = '_mc_import_admin_check_field';
  $form = system_settings_form($form);
  array_unshift($form['#submit'], '_mc_import_admin_save_password');
  return $form;
}

/**
 * Check to make sure that the field listed exists in the node type selected.
 */
function _mc_import_admin_check_field($form, &$form_state) {
  $fields_in_node = $form['mc_import_node']['mc_import_id_field']['#options'][node_get_types('name', $form_state['values']['mc_import_node_type'])];
  if (!in_array($form_state['values']['mc_import_id_field'], $fields_in_node)) {
    form_set_error('mc_import_id_field', t('Field listed must be in node type'));
  }
}

/**
 * Unset password from form if it has no value so that it is not overwritten
 * by saving a form with no value.
 */
function _mc_import_admin_save_password($form, &$form_state) {
  if ($form_state['values']['mc_import_password'] == '') {
    unset($form_state['values']['mc_import_password']);
  }
}

/**
 * mc_import_valid_email
 * 
 * Element validation for mc_import_admin_form to make sure email is valid.
 */
function mc_import_valid_email($element) {
  if (!valid_email_address($element['#value'])) {
    form_error($element, 'Must be valid email address');
  }
}

/**
 * Form to provide field mapping
 */
function mc_import_admin_node_map(&$form_state) {
  $form['mc_import_admin_subject_place'] = array(
    '#type' => 'select',
    '#title' => t('Subject Operation'),
    '#description' => t('Select the word placment in the subject that should tell
      the module the operation to run on the node'),
    '#options' => array(1, 2, 3, 4, 5, 6, 7, 8, 9),
    '#default_value' => variable_get('mc_import_admin_subject_place', 1),
    '#required' => TRUE,
  );
  $form['mc_import_admin_subject_ops'] = array(
    '#type' => 'textarea',
    '#title' => t('Subject Operation List'),
    '#description' => t('Enter a list of recognized operations (from the email subject
      word declare in the above setting), that we will run a operation on. Each entry should
      but seperated by a comma.'),
    '#default_value' => variable_get('mc_import_admin_subject_ops', ''),
    '#required' => TRUE,
    '#rows' => 4,
  );
  $form['#submit'][] = '_mc_import_menu_rebuild';
  return system_settings_form($form);
}

function _mc_import_menu_rebuild($form, &$form_state) {
  menu_rebuild();
}

function mc_import_node_map_form(&$form_state, $op) {
  $form['mc_import_node'] = array(
    '#type' => 'fieldset',
    '#title' => t('Manuscript Central Node Settings'),
    '#description' => t('Form settings to tell which node type to use'),
    '#collaspsible' => TRUE,
  );
  foreach (node_get_types('names') as $type) {
    $fields = array_keys(content_fields(NULL, $type));
    foreach ($fields as $field) {
      $options[$type][$field] = $field;
    }
  }
  $form['mc_import_node']['mc_import_op_' . $op .'_node_type'] = array(
    '#type' => 'select',
    '#title' => t('MC Import Node Type'),
    '#description' => t('Select the node type to import the email into'),
    '#options' => node_get_types('names'),
    '#default_value' => variable_get('mc_import_op_' . $op .'_node_type', ''),
    '#required' => TRUE,
  );
  $form['mc_import_node']['mc_import_op_' . $op . '_id_field'] = array(
    '#type' => 'select',
    '#title' => t('Unique ID'),
    '#description' => t('Select the ScholarOne Id field that the email should map too. This also selects
      the node type into which the email will be imported.'),
    '#options' => $options,
    '#default_value' => variable_get('mc_import_op_' . $op . '_id_field', ''),
    '#required' => TRUE,
  );
  $form['mc_import_node']['mc_import_op_' . $op . '_function'] = array(
    '#type' => 'select',
    '#title' => t('OP Callback'),
    '#description' => t('Select the operation to call with this operation'),
    '#options' => array('create' => t('Create New Node'), 'update' => t('Update Existing Node'), 'delete' => t('Delete Existing node')),
    '#required' => TRUE,
  );
  if ($type = variable_get('mc_import_op_' . $op . '_node_type')) {
    $form['mapping'] = array(
      '#type' => 'fieldset',
      '#title' => t('Field Mapping'),
    );
    $form['mapping']['mc_import_op_' . $op . 'mapping'] = array(
      '#type' => 'textarea',
      '#title' => t('Import Field Mapping'),
      '#description' => t('Using the fields listed below, map the fields in the order
        they are to appear in the email. Each value should be seperated by a comma.'),
      '#default_value' => variable_get('mc_import_op_' . $op . 'mapping', ''),
      '#required' => TRUE,
      '#rows' => 3,
    );
    $info = content_types($type);
    $fields = array();
    if (isset($info['fields']) && count($info['fields'])) {
      foreach ($info['fields'] as $field_name => $field) {
        $fields[$field_name] = isset($field['widget']['label']) ? $field['widget']['label'] : $field_name;
      }
    }
    $node_values = array('title', 'uid', 'status', 'body', 'teaser', 'revision', 'promote', 'comment');
    $fields = array_merge($node_values, array_keys($fields));

    $form['mapping']['mc_import_op_' . $op . '_markup'] = array(
      '#type' => 'markup',
      '#value' => theme('item_list', $fields),
    );
  }
  return system_settings_form($form);

}



/**
 * mc_import_manual_form
 * 
 * Provides a way of manually importing mail
 */
function mc_import_manual_form(&$form_state) {
  $form['submit'] = array('#type' => 'submit', '#value' => t('Import'));
  return $form;
}

/**
 * Submit handler for manual form (call the import function).
 * 
 */
function mc_import_manual_form_submit($form, &$form_state) {
  mc_import_import('manual');
}

function mc_import_cron() {
  mc_import_import();
}

/**
 * mc_import_import($type).
 * 
 * Defines the main feature of this module. The import mechanism.
 * This is where the meat comes in. Broken down into connecting,
 * parsing, and saving/updating nodes.
 */

function mc_import_import($type = 'auto') {
  $mail = mc_import_getmail($type);
}

/**
 * mc_import_getmail()
 * 
 * Gets the incoming mail. Takes no arguments. Returns an array
 * of new e-mails.
 * 
 * $type (string) passed by parent function to tell how to display errors.
 */
function mc_import_getmail($type) {
  // Server with all options
  $pophost = '{' . variable_get('mc_import_host','') . ':' . variable_get('mc_import_port', '110') .
          '/' . variable_get('mc_import_prot', 'pop3') . variable_get('mc_import_options', '') . '}INBOX';
  // User name for server
  $user = variable_get('mc_import_email', '');
  // Server user password
  $password = variable_get('mc_import_password');
  // Open mailbox.
  $mbx = imap_open($pophost , $user , $password);
  if (!$mbx) {
    watchdog('mc_import', 'Failed importing email from @email.', array('@email' => $user), 'WATCHDOG_ERROR');
    if ($type == 'manual') {
      drupal_set_message('Failed importing email from @email.', array('@email' => $user));
    }
    return;
  }
  
  $msg_count = imap_num_msg($mbx);
  
  for ($i = 1; $i <= $msg_count; $i++) {
    $header = imap_header($mbx, $i);
    $body = trim(imap_body($mbx, $i));
    $subject = mc_import_parse_subject($header);
    switch ($subject['op']) {
      case 'new':
        mc_import_create($header, $subject, $body);
        break;
      case 'unpublish':
        $info = mc_import_node_info();
        $node = node_load(array($info['field'] => $subject['id']));
        $node->published = 0;
        node_save($node);
        break;
    }

    
  }
}

function mc_import_node_info() {
  $info = array();
  $info['field'] = variable_get('mc_import_id_field', '');
  $info['node_type'] = variable_get('mc_import_node_type', '');

  return $info;
}

function mc_import_create($header, $subject, $body) {
  $info = mc_import_node_info();
  $prop = mc_import_parse_body($body);
  $node = new stdClass();
  $node->type = $info['node_type'];


}

function mc_import_parse_subject($header) {
  $keys = array('command', 'id', 'op');
  if (isset($header->subject)) {
    $values = explode(' ', $header->subject);
  }
  $subject = array_combine($keys, $values);

  return $subject;
}

function mc_import_parse_body($body, $type = 'full') {
  $array_keys();
  $body = explode(';', $body);
}