<?php

define('FILEFIELD_PRIVATE_DEFAULT_DIRECTORY', '/filefield_private_files');

/**
 * Implementation of hook_widget_settings_alter().
 */
function filefield_private_field_settings_alter(&$settings, $op, $field) {
  // Only support modules that implement hook_filefield_private_file_widgets().
  $field_type = isset($field['widget_type']) ? $field['widget_type'] : $field['type'];
  if (!in_array($field_type, filefield_private_file_fields())) {
    return;
  }

  // Add our new options to the list of settings to be saved.
  if ($op == 'save') {
    $settings = array_merge($settings, array('filefield_private_downloads', 'filefield_private_content_disposition'));
  }

  // Add the additional settings to the form.
  if ($op == 'form') {
    $settings['filefield_private_downloads'] = array(
      '#type' => 'checkbox',
      '#title' => t('Private downloads'),
      '#default_value' => (bool) $field['filefield_private_downloads'],
      '#description' => t('Enables private downloads.'),
    );
  }
}

function filefield_private_file_widgets($reset = FALSE) {
  static $widgets;
  if (!isset($widgets) || $reset) {
    $widgets = module_invoke_all('filefield_private_file_widgets');
  }
  return $widgets;
}

/**
 * Implementation of hook_filefield_private_file_widgets().
 */
function filefield_private_filefield_private_file_widgets() {
  return array(
    'filefield_widget', 'imagefield_widget',
  );
}


function filefield_private_file_fields($reset = FALSE) {
  static $fields;
  if (!isset($fields) || $reset) {
    $fields = module_invoke_all('filefield_private_file_fields');
  }
  return $fields;
}

/**
 * Implementation of hook_filefield_private_file_fields().
 */
function filefield_private_filefield_private_file_fields() {
  return array(
    'filefield',
  );
}

/**
 * Implementation of hook_menu().
 */
function filefield_private_menu() {
  $items = array();

  $items[file_directory_path() . '/filefield_private_download'] = array(
    'title' => 'File download', 
    'page callback' => '_filefield_private_file_download', 
    'access callback' => TRUE, 
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Wrapper around file_download that sets the download directory as the private.
 */
function _filefield_private_file_download() {
  global $conf;

  $public = $conf['file_directory_path'];
  $conf['file_directory_path'] = variable_get('filefield_private_directory_path',  $public . FILEFIELD_PRIVATE_DEFAULT_DIRECTORY);

  // this is essiently file_download, other than resetting $conf as needed.
  $args = func_get_args();
  $filepath = implode('/', $args);

  // Maintain compatibility with old ?file=paths saved in node bodies.
  if (isset($_GET['file'])) {
    $filepath =  $_GET['file'];
  }

  if (file_exists(file_create_path($filepath))) {
    $headers = module_invoke_all('file_download', $filepath);
    if (in_array(-1, $headers)) {
      $conf['file_directory_path'] = $public;
      return drupal_access_denied();
    }
    if (count($headers)) {
      file_transfer($filepath, $headers);
    }
  }
  $conf['file_directory_path'] = $public;
  return drupal_not_found();
}

/**
 * Implementation of hook_form_alter().
 */
function filefield_private_form_alter(&$form, $from_state, $form_id) {
  switch ($form_id) {
    case 'system_file_system_settings':
      $form['filefield_private_directory_path'] = array(
        '#type' => 'textfield',
        '#title' => t('FileField private file system path'),
        '#default_value' => variable_get('filefield_private_directory_path', file_directory_path() . FILEFIELD_PRIVATE_DEFAULT_DIRECTORY),
        '#maxlength' => 255,
        '#description' => t('A file system path where the files will be stored if the %type option above is selected for a FileField. This directory must exist and be writable by Drupal. The download method will be treated as private.',
            array('%type' => t('Private downloads for user files?'))),
        '#after_build' => array('system_check_directory'),
      );
      $form['buttons']['#weight'] = 10;

  }
}

/**
 * Implements hook_nodeapi().
 */
function filefield_private_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($op == 'insert' || $op == 'update') {
    filefield_private_move_files($node);
  }
}

/**
 * Moves the file.
 */
function filefield_private_move_files(&$node) {
  global $conf;
  if (is_object($node)) {
    $files = array();

    $system_directory_path = $conf['file_directory_path'];
    $real_system_directory_path = realpath($system_directory_path);

    $filefield_private_directory_path = variable_get('filefield_private_directory_path', $system_directory_path . FILEFIELD_PRIVATE_DEFAULT_DIRECTORY);
    $real_filefield_private_directory_path = realpath($filefield_private_directory_path);

    $content_type = content_types($node->type);
    $file_fields = filefield_private_file_fields();

    foreach ($content_type['fields'] as $field) {
      if (!empty($field['filefield_private_downloads']) && in_array($field['type'], $file_fields) && isset($node->$field['field_name']) && is_array($node->$field['field_name'])) {
        foreach ($node->$field['field_name'] as $file) {
          if (file_exists($file['filepath'])) {
            $file['realpath'] = realpath($file['filepath']);
            // If within the private path, ignore the file
            if (strpos($file['realpath'], $real_filefield_private_directory_path) !== 0) {
              $file['relative_path'] = ltrim(substr($file['realpath'], strlen($real_system_directory_path)), '\\/');
              $file['dest'] = rtrim($filefield_private_directory_path, '\\/') .'/'. $file['relative_path'];
              $files[$file['fid']] = $file;
            }
          }
        }
      }
    }
    foreach ($files as $file) {
      $conf['file_directory_path'] = $filefield_private_directory_path;
      $src = $file['filepath'];
      if (($last = strpos($file['relative_path'], '/')) !== NULL) {
        $dest = $filefield_private_directory_path . '/' . substr($file['relative_path'], 0, $last) . '/';
        file_check_directory($dest, TRUE);
      }
      else {
        $dest = 0;
      }
      if (file_move($src, $dest, FILE_EXISTS_RENAME)) {
        // update db
        db_query("UPDATE {files} SET filepath = '%s' WHERE filepath = '%s'", $src, $file['filepath']);

        // Clear relavent caches.
        _field_file_cache(NULL, TRUE);
        cache_clear_all("content:{$node->nid}:{$node->vid}", content_cache_tablename());
      }
      else {
        // Error - TODO Find a better way
        $delete = file_delete($file['filepath']);
        db_query("DELETE FROM {files} WHERE filepath = '%s'", $file['filepath']);
        if ($delete) {
          drupal_set_message(t('Error moving the file from the public to private file directories. The file was deleted as a pre-caution from the public error. The node file details should be updated by removing the file reference.'), 'error');
        }
        else {
          drupal_set_message(t('Error moving the file from the public to private file directories. This file could not be deleted from the public file area and should be removed manually. Please report this to your system administrator. Filepath: "%filepath".', array('%filepath' => $file['filepath'])), 'error');
        }
      }
      $conf['file_directory_path'] = $system_directory_path;
    }
  }
}

/**
 * Implementation of hook_file_load().
 */
function filefield_private_file_load(&$file) {
  static $real_filefield_private_directory_path, $directory_path, $filefield_private_directory_path;
  if (!isset($real_filefield_private_directory_path)) {
    $directory_path = file_directory_path();
    $filefield_private_directory_path = variable_get('filefield_private_directory_path', file_directory_path() . FILEFIELD_PRIVATE_DEFAULT_DIRECTORY);
    $real_filefield_private_directory_path = realpath($filefield_private_directory_path);
  }

  if (file_exists($file->filepath)) {
    $file->realpath = realpath($file->filepath);
    // If within the private path, ignore the file
    if (strpos($file->realpath, $real_filefield_private_directory_path) === 0) {
      $file->filepath = $directory_path . '/filefield_private_download' . substr($file->filepath, strlen($filefield_private_directory_path));
    } 
  }
}
